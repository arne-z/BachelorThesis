/**
 * generated by Xtext 2.16.0
 */
package org.xtext.dialogflowConfig.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.dialogflowConfig.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DialogflowConfigFactoryImpl extends EFactoryImpl implements DialogflowConfigFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DialogflowConfigFactory init()
  {
    try
    {
      DialogflowConfigFactory theDialogflowConfigFactory = (DialogflowConfigFactory)EPackage.Registry.INSTANCE.getEFactory(DialogflowConfigPackage.eNS_URI);
      if (theDialogflowConfigFactory != null)
      {
        return theDialogflowConfigFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DialogflowConfigFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DialogflowConfigFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DialogflowConfigPackage.AGENT: return createAgent();
      case DialogflowConfigPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case DialogflowConfigPackage.INTENT: return createIntent();
      case DialogflowConfigPackage.INPUT_CONTEXT: return createInputContext();
      case DialogflowConfigPackage.OUTPUT_CONTEXT: return createOutputContext();
      case DialogflowConfigPackage.TRAINING_PHRASE: return createTrainingPhrase();
      case DialogflowConfigPackage.ABSTRACT_WORD: return createAbstractWord();
      case DialogflowConfigPackage.TEXT: return createText();
      case DialogflowConfigPackage.TOKEN: return createToken();
      case DialogflowConfigPackage.PARAMETER: return createParameter();
      case DialogflowConfigPackage.ENTITY_TYPE: return createEntityType();
      case DialogflowConfigPackage.ENTITY: return createEntity();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Agent createAgent()
  {
    AgentImpl agent = new AgentImpl();
    return agent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Intent createIntent()
  {
    IntentImpl intent = new IntentImpl();
    return intent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputContext createInputContext()
  {
    InputContextImpl inputContext = new InputContextImpl();
    return inputContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputContext createOutputContext()
  {
    OutputContextImpl outputContext = new OutputContextImpl();
    return outputContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TrainingPhrase createTrainingPhrase()
  {
    TrainingPhraseImpl trainingPhrase = new TrainingPhraseImpl();
    return trainingPhrase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractWord createAbstractWord()
  {
    AbstractWordImpl abstractWord = new AbstractWordImpl();
    return abstractWord;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Token createToken()
  {
    TokenImpl token = new TokenImpl();
    return token;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityType createEntityType()
  {
    EntityTypeImpl entityType = new EntityTypeImpl();
    return entityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DialogflowConfigPackage getDialogflowConfigPackage()
  {
    return (DialogflowConfigPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DialogflowConfigPackage getPackage()
  {
    return DialogflowConfigPackage.eINSTANCE;
  }

} //DialogflowConfigFactoryImpl
