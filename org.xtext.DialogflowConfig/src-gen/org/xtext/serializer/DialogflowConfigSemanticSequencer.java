/*
 * generated by Xtext 2.16.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.dialogflowConfig.Agent;
import org.xtext.dialogflowConfig.DialogflowConfigPackage;
import org.xtext.dialogflowConfig.Entity;
import org.xtext.dialogflowConfig.Intent;
import org.xtext.dialogflowConfig.State;
import org.xtext.services.DialogflowConfigGrammarAccess;

@SuppressWarnings("all")
public class DialogflowConfigSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DialogflowConfigGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DialogflowConfigPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DialogflowConfigPackage.AGENT:
				sequence_Agent(context, (Agent) semanticObject); 
				return; 
			case DialogflowConfigPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case DialogflowConfigPackage.INTENT:
				sequence_Intent(context, (Intent) semanticObject); 
				return; 
			case DialogflowConfigPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Agent returns Agent
	 *
	 * Constraint:
	 *     (name=ID elements+=Element*)
	 */
	protected void sequence_Agent(ISerializationContext context, Agent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID states+=State*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Intent
	 *     Intent returns Intent
	 *
	 * Constraint:
	 *     (name=ID (parameters+=[Entity|ID] parameters+=[Entity|ID]*)? file=STRING)
	 */
	protected void sequence_Intent(ISerializationContext context, Intent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DialogflowConfigPackage.Literals.STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DialogflowConfigPackage.Literals.STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
