/*
 * generated by Xtext 2.16.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalDialogflowConfigParser;
import org.xtext.services.DialogflowConfigGrammarAccess;

public class DialogflowConfigParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DialogflowConfigGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DialogflowConfigGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getAgentAccess().getGroup(), "rule__Agent__Group__0");
			builder.put(grammarAccess.getIntentAccess().getGroup(), "rule__Intent__Group__0");
			builder.put(grammarAccess.getIntentAccess().getGroup_2(), "rule__Intent__Group_2__0");
			builder.put(grammarAccess.getIntentAccess().getGroup_2_2(), "rule__Intent__Group_2_2__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
			builder.put(grammarAccess.getAgentAccess().getNameAssignment_1(), "rule__Agent__NameAssignment_1");
			builder.put(grammarAccess.getAgentAccess().getElementsAssignment_2(), "rule__Agent__ElementsAssignment_2");
			builder.put(grammarAccess.getIntentAccess().getNameAssignment_1(), "rule__Intent__NameAssignment_1");
			builder.put(grammarAccess.getIntentAccess().getParametersAssignment_2_1(), "rule__Intent__ParametersAssignment_2_1");
			builder.put(grammarAccess.getIntentAccess().getParametersAssignment_2_2_1(), "rule__Intent__ParametersAssignment_2_2_1");
			builder.put(grammarAccess.getIntentAccess().getFileAssignment_5(), "rule__Intent__FileAssignment_5");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getStatesAssignment_2_1(), "rule__Entity__StatesAssignment_2_1");
			builder.put(grammarAccess.getStateAccess().getNameAssignment(), "rule__State__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DialogflowConfigGrammarAccess grammarAccess;

	@Override
	protected InternalDialogflowConfigParser createParser() {
		InternalDialogflowConfigParser result = new InternalDialogflowConfigParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DialogflowConfigGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DialogflowConfigGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
